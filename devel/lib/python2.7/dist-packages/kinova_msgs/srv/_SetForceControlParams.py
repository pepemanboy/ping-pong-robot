# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinova_msgs/SetForceControlParamsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SetForceControlParamsRequest(genpy.Message):
  _md5sum = "5c0999be3d1c60dba47ea0b2fd08231e"
  _type = "kinova_msgs/SetForceControlParamsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 inertia_linear
geometry_msgs/Vector3 inertia_angular
geometry_msgs/Vector3 damping_linear
geometry_msgs/Vector3 damping_angular
geometry_msgs/Vector3 force_min_linear
geometry_msgs/Vector3 force_min_angular
geometry_msgs/Vector3 force_max_linear
geometry_msgs/Vector3 force_max_angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['inertia_linear','inertia_angular','damping_linear','damping_angular','force_min_linear','force_min_angular','force_max_linear','force_max_angular']
  _slot_types = ['geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inertia_linear,inertia_angular,damping_linear,damping_angular,force_min_linear,force_min_angular,force_max_linear,force_max_angular

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetForceControlParamsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.inertia_linear is None:
        self.inertia_linear = geometry_msgs.msg.Vector3()
      if self.inertia_angular is None:
        self.inertia_angular = geometry_msgs.msg.Vector3()
      if self.damping_linear is None:
        self.damping_linear = geometry_msgs.msg.Vector3()
      if self.damping_angular is None:
        self.damping_angular = geometry_msgs.msg.Vector3()
      if self.force_min_linear is None:
        self.force_min_linear = geometry_msgs.msg.Vector3()
      if self.force_min_angular is None:
        self.force_min_angular = geometry_msgs.msg.Vector3()
      if self.force_max_linear is None:
        self.force_max_linear = geometry_msgs.msg.Vector3()
      if self.force_max_angular is None:
        self.force_max_angular = geometry_msgs.msg.Vector3()
    else:
      self.inertia_linear = geometry_msgs.msg.Vector3()
      self.inertia_angular = geometry_msgs.msg.Vector3()
      self.damping_linear = geometry_msgs.msg.Vector3()
      self.damping_angular = geometry_msgs.msg.Vector3()
      self.force_min_linear = geometry_msgs.msg.Vector3()
      self.force_min_angular = geometry_msgs.msg.Vector3()
      self.force_max_linear = geometry_msgs.msg.Vector3()
      self.force_max_angular = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_24d.pack(_x.inertia_linear.x, _x.inertia_linear.y, _x.inertia_linear.z, _x.inertia_angular.x, _x.inertia_angular.y, _x.inertia_angular.z, _x.damping_linear.x, _x.damping_linear.y, _x.damping_linear.z, _x.damping_angular.x, _x.damping_angular.y, _x.damping_angular.z, _x.force_min_linear.x, _x.force_min_linear.y, _x.force_min_linear.z, _x.force_min_angular.x, _x.force_min_angular.y, _x.force_min_angular.z, _x.force_max_linear.x, _x.force_max_linear.y, _x.force_max_linear.z, _x.force_max_angular.x, _x.force_max_angular.y, _x.force_max_angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.inertia_linear is None:
        self.inertia_linear = geometry_msgs.msg.Vector3()
      if self.inertia_angular is None:
        self.inertia_angular = geometry_msgs.msg.Vector3()
      if self.damping_linear is None:
        self.damping_linear = geometry_msgs.msg.Vector3()
      if self.damping_angular is None:
        self.damping_angular = geometry_msgs.msg.Vector3()
      if self.force_min_linear is None:
        self.force_min_linear = geometry_msgs.msg.Vector3()
      if self.force_min_angular is None:
        self.force_min_angular = geometry_msgs.msg.Vector3()
      if self.force_max_linear is None:
        self.force_max_linear = geometry_msgs.msg.Vector3()
      if self.force_max_angular is None:
        self.force_max_angular = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.inertia_linear.x, _x.inertia_linear.y, _x.inertia_linear.z, _x.inertia_angular.x, _x.inertia_angular.y, _x.inertia_angular.z, _x.damping_linear.x, _x.damping_linear.y, _x.damping_linear.z, _x.damping_angular.x, _x.damping_angular.y, _x.damping_angular.z, _x.force_min_linear.x, _x.force_min_linear.y, _x.force_min_linear.z, _x.force_min_angular.x, _x.force_min_angular.y, _x.force_min_angular.z, _x.force_max_linear.x, _x.force_max_linear.y, _x.force_max_linear.z, _x.force_max_angular.x, _x.force_max_angular.y, _x.force_max_angular.z,) = _struct_24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_24d.pack(_x.inertia_linear.x, _x.inertia_linear.y, _x.inertia_linear.z, _x.inertia_angular.x, _x.inertia_angular.y, _x.inertia_angular.z, _x.damping_linear.x, _x.damping_linear.y, _x.damping_linear.z, _x.damping_angular.x, _x.damping_angular.y, _x.damping_angular.z, _x.force_min_linear.x, _x.force_min_linear.y, _x.force_min_linear.z, _x.force_min_angular.x, _x.force_min_angular.y, _x.force_min_angular.z, _x.force_max_linear.x, _x.force_max_linear.y, _x.force_max_linear.z, _x.force_max_angular.x, _x.force_max_angular.y, _x.force_max_angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.inertia_linear is None:
        self.inertia_linear = geometry_msgs.msg.Vector3()
      if self.inertia_angular is None:
        self.inertia_angular = geometry_msgs.msg.Vector3()
      if self.damping_linear is None:
        self.damping_linear = geometry_msgs.msg.Vector3()
      if self.damping_angular is None:
        self.damping_angular = geometry_msgs.msg.Vector3()
      if self.force_min_linear is None:
        self.force_min_linear = geometry_msgs.msg.Vector3()
      if self.force_min_angular is None:
        self.force_min_angular = geometry_msgs.msg.Vector3()
      if self.force_max_linear is None:
        self.force_max_linear = geometry_msgs.msg.Vector3()
      if self.force_max_angular is None:
        self.force_max_angular = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 192
      (_x.inertia_linear.x, _x.inertia_linear.y, _x.inertia_linear.z, _x.inertia_angular.x, _x.inertia_angular.y, _x.inertia_angular.z, _x.damping_linear.x, _x.damping_linear.y, _x.damping_linear.z, _x.damping_angular.x, _x.damping_angular.y, _x.damping_angular.z, _x.force_min_linear.x, _x.force_min_linear.y, _x.force_min_linear.z, _x.force_min_angular.x, _x.force_min_angular.y, _x.force_min_angular.z, _x.force_max_linear.x, _x.force_max_linear.y, _x.force_max_linear.z, _x.force_max_angular.x, _x.force_max_angular.y, _x.force_max_angular.z,) = _struct_24d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_24d = struct.Struct("<24d")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from kinova_msgs/SetForceControlParamsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetForceControlParamsResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "kinova_msgs/SetForceControlParamsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetForceControlParamsResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class SetForceControlParams(object):
  _type          = 'kinova_msgs/SetForceControlParams'
  _md5sum = '5c0999be3d1c60dba47ea0b2fd08231e'
  _request_class  = SetForceControlParamsRequest
  _response_class = SetForceControlParamsResponse
